PLIP 10866:Event type impreovements
========================================================================

PLIP ticket: https://dev.plone.org/plone/ticket/10866

Review #1 by Elizabeth Leddy (eleddy)

The PLIP was reviewed on Mac OS X 10.6.5 using python 2.6.6, Chrome 7.0.517.44, 
iCal for mac

Review steps
------------
- Run all tests
- Review Code
- Test all sorts of things in browser

Notes and observations
----------------------
 - In plone.event one test case is failing: testEventExporterFeed
 - In Products.DateRecurringIndex one test case is failing: index_timedelta.txt
 - Need to have a migration step. I am slightly concerned that the directions require a new 
   Plone site to even test.
   
Note: I realize that some of these comments may not be directly related to this plip but 
please forgive me that its hard to separate all of these packages out.

 - Testing adding an event:
   Adding a date out of range, e.g. 30 Feb or 60 June for a start or end date throws 
   AttributeError: 'str' object has no attribute 'day'. This could be resolved with 
   javascript validation but I am curious the motivation to switch from a drop down to a 
   text based field. In my experience using web applications, the end user expects a 
   drop down in this case. The same issue for the time fields. Anyone can enter any data 
   in these text fields and it causes a stack trace. The already reported bug was for end
   date but all text fields have this error.
 - Same error as above if the end date is after the start date
 - This is a small detail but in the time fields if something is 0 hours or 0 minutes I think
   it would be nice to have 2 zeros - 00:00. Of course if it moves to a drop down then not 
   need. This is also nice for when create a new event at say 18:03. 18:3 looks weird.
 - Also a small detail, but it would be nice if when editing an event, the calendar 
   automatically moves to the month and year that the existing date is instead of todays month
   and year. This is a nice to have but makes a world of difference to the end user.
 - When downloading the event in its vcalendar version, the extension is .vcs.ics . I am not
   100% sure but I think the extension should just be .vcs. I don't see this in the code and 
   wonder if it's something the browser is doing.
 - There seems to be an issue with an empty field and exporting to ical. Not sure where this 
   is coming from in the export:
        ...
        SUMMARY:Scrib Scrab
        DTSTART:20110627T070000Z
        DTEND:20111107T075900Z
------> None
        DESCRIPTION:dfgdfgdfg\n
        LOCATION:HOME
        CLASS:PUBLIC
        ...
   
 - Javascript does not take into account the new javascript standards. Would be nice to 
   integrate with those in mind. Does not pass jslint basics test.
 - Javascript calendar needs some way to be manually closed besides clicking outside of 
   the box (an X type thing)
 - The Javascript calendar is wrong. I think its just the labels across the top. They should 
   start with SUNDAY in the current rendering instead of Monday. Mine right now, for example, 
   states that Nov 29th is on a Tuesday.
 - If we are going to push without the recurrence stuff completed lets hide the recurrence 
   tab in the meanwhile. Since this is not complete I did not thoroughly test anything 
   here.
 - For testing (and end user sanity) it would be nice to
   display the timezone things are occurring in every time the event is listed. I tried 
   adjusting the localized time string in portal_properties > site_properties but it doesn't 
   seem to be using localized time strings.
 - In the same properties sheet calendar_starting_year and calendar_future_years_available
   seem to be ignored. I know that I have several products that use calendar_starting_year
   (for birth dates for example) although I'm not so convinced on future years. I think it 
   also depends on if this widget will be the "NEW and IMPROVED" datewidget for archetypes.
   If this is the case we need to honor these variables, or remove them. The additional case 
   for this is when looking at the modified time vs the actual time. When a server is 
   running in one tz and a users browser sets the widget for another (which is nice btw), 
   without a timestamp things could appear like they travelled through time to be created.
   Additionally its whack confusing when people create things from different TZ's.
 - When listing the future events by default, events for today are not included. This may 
   mean tweaking the default criteria but I'm not sure exactly what the implementation 
   is behind the scenes. I would even argue that events from earlier in the same day should 
   be included. I know this doesn't make programmatic sense but it makes sense to the end 
   user. Whole day events STARTING TODAY  (even if the end in 10 days)are not listed either so 
   there is definitely something worth investigating here.
 - Adding a whole day event that starts on the 28th and ends on the 30th of november does not
   return when clicking on "30" in the calendar portlet. The generated url for debugging if it
   helps: http://localhost:8080/Plone/search?review_state=published&amp;start.query:record:list:date=2010-11-30+23:59:59&start.range:record=max&end.query:record:list:date=2010-11-30+00:00:00&end.range:record=min 
 - If I create an event in one timezone, and then edit it in another, it does not adjust for my 
   timezone. I don't know how edge case this is but I definitely have a site with a use case 
   for it (teams of schedulers). For example, if I create an event in 9:00 PM EST then reopen 
   it in a browser in California the time should be 6:00 PM PST. I know this might be on a long 
   list of nice to haves but since you are adjusting for end user time zone when creating it 
   would be nice to tackle this as well. Clever approach btw.

Conclusion
----------
I am on the edge for this plip. This overhaul is beyond overdue but there are a lot of bugs here 
that I actually pulled most of from my experience manhandling tickets from the old events module. 
Users do this type of shit all the time.

I don't think there is any need to require recurrence for integrating this plip but I am nervous 
to change indexes and get all funky with it when the final implementation isn't tested. I also 
get nervous that the final implementation of the recurrence widget COULD affect the code in 
the back end.

Overall the architecture is well thought through and the core of the code looks good. I can't 
wait to get some of this timezone stuff worked out and into some of my own code.

I'm open to discussion on this plip. I would say +1 to merge if the following were fixed:
    - Must have a migration path
    - Calendar widget must display correctly
    - Events searching must be fixed
    - Ability to display timezone of events
    - Address all failing test cases
    - All validation situations where attribute error is thrown addressed
    
This is a decent amount of work and I would be happy to wait until 4.2 for this as well if it 
included the recurrence widget completion and some more testing. The old events module isn't
bad enough to force something that needs a little bit more time to complete.
