PLIP 9352: Improved search results
==================================

PLIP ticket: https://dev.plone.org/plone/ticket/9352

Review by David Glick (dglick@gmail.com, davisagli on irc)

The PLIP was reviewed on Mac OS X 10.6.4 using python 2.6.4 and Firefox
4.0b8pre.


Review steps
------------

- Ran buildout using the plip9352-search-results.cfg file.

- Ran tests for plone.app.search.

- Ran selenium tests using bin/test -s plone.app.search --tests-pattern=selenium

- Ran performance benchmarks using bin/test -s plone.app.search --tests-pattern=performance

- Ran bin/alltests to check for additional failures in the Plone stack
  caused by PLIP changes.

- Reviewed the code in plone.app.search, and changes in other packages checked
  out by the PLIP buildout.

- Tested search results behavior through the web.

Notes and observations
----------------------

- The scope of this PLIP has changed somewhat since it was written. It would be
  nice if the trac ticket description could be updated to reflect the current
  goals and status, so that one doesn't need to read the entire comment thread.

- The plone.app.search tests pass. Alltests had a couple failures in 
  plone.testing's tests, but nothing related to this PLIP.  Coverage could be
  improved.

- The performance benchmark appears to show that the new view is slightly
  faster than the old template.

- Overall the implementation looks pretty straightforward and reasonable. The
  implementation does currently depend on the acceptance of PLIP 10846 
  (include plone.app.testing in the KGS) and PLIP 9327 (unified content listing
  interface).

- The 'sortoption' class definition should be moved to module scope to avoid
  redefining it every time the getSortOptions method is called.

- The old search UI (search.pt and search_form.pt) should probably be moved
  to the plone_deprecated skin layer.

- It would be nice if search_rss.pt could be rewritten to use the new browser
  view to get results, so that the queryCatalog.py script could be deprecated.

- The "Advanced Search" link in the live search results needs to be updated.
  So does the link and form action in the search portlet.

- Trying to modify the criteria or sort order seems to lose all the results.
  Investigating further, it looks like this is because the 'Creator' and
  'created' criteria are getting passed to the catalog in the wrong format.
  The default setting for the Creator criteria is '' (empty string), which
  filters out everything rather than including everything as it is intended.
  The date criterion appears to be querying for one single date rather than
  a date range.
  
  This is a pretty major problem, and rather stunning if I am the first person
  to notice it!

- I'm worried about the user experience of navigating using the browser's
  "Back" button after there is an AJAX update of search results. It doesn't
  look like there is any attempt made to manage this history, so I would
  guess it returns to the page the user was on before they entered the search
  interface, rather than returning to their last query. At Groundwire we
  deployed an AJAXified search interface like this for one client but had to
  roll it back because the lack of proper integration with browser history
  confused people too much.

- The updateResults javascript method should report errors with the AJAX call
  in some fashion.

- The fallback behavior when Javascript is disabled seems to work okay, which
  is great. The exception is that "Select All/None" checkboxes are still
  rendered, but non-functional. They should probably be rendered with
  display:none and shown via Javascript to avoid confusion.

- I don't have access to test the Javascript on IE, but if that hasn't been
  done, it should be.

- The UI looks somewhat odd when using the Classic theme instead of Sunburst,
  and the search results disappear when I click the "You can narrow them down"
  link. This should probably be looked at before merge, as it appears the
  javascript may be assuming the presence of a deco grid in the markup, which
  isn't a valid assumption for many themes including Classic.

Conclusion
----------

This work looks quite promising and would provide a significant improvement
over the current search UI without too many changes. It can't be merged until
the issue with not applying the criteria correctly is fixed, or without
approval of the other PLIPs on which it depends, but most of the other issues
are minor. I'm hopeful that the issues could be fixed in time to still merge
this for Plone 4.1.
