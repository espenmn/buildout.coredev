PLIP 10959: API for password validation policy
==============================================

PLIP ticket: https://dev.plone.org/plone/ticket/10959

Review by Ross Patterson (me@rpatterson.net, zenwryly on irc)

The PLIP was reviewed on Ubuntu 11.10 (Oneiric) using python 2.6.7 and
Google Chrome 17.0.


Review steps
------------

- Ran the plips/plip10959-password-validation-api.cfg buildout.

- Ran "bin/test -v -s plone.app.users -s Products.PlonePAS -s
  Products.PasswordStrength".  No Failures.

- Ran "bin/test -v -s Products.CMFPlone".

- Ran "bin/test -v -s plone.app.users --coverage=var/coverage".

- Ran bin/alltests.  TODO

- Created a new Plone site.  TODO

- Added several users using the new UI.  TODO

- Examined code leaving comments on the commits in github:
  https://github.com/plone/plone.app.users/pull/2


Notes and observations
----------------------

Items prefixed with "MUST FIX" must, IMO, be addressed before merging.

- coverage looks good

    1   100%   plone.app.users.browser.__init__   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/browser/__init__.py)
   89    93%   plone.app.users.browser.account   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/browser/account.py)
    6   100%   plone.app.users.browser.interfaces   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/browser/interfaces.py)
  244    93%   plone.app.users.browser.personalpreferences   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/browser/personalpreferences.py)
  352    75%   plone.app.users.browser.register   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/browser/register.py)
   32    96%   plone.app.users.registration   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/registration.py)
   26   100%   plone.app.users.registrationschema   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/registrationschema.py)
    1   100%   plone.app.users.tests.__init__   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/tests/__init__.py)
   65    86%   plone.app.users.tests.base   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/tests/base.py)
   22   100%   plone.app.users.tests.test_doctests   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/tests/test_doctests.py)
   78    84%   plone.app.users.userdataschema   (/home/xen/src/plone-coredev.svn/src/plone.app.users/plone/app/users/userdataschema.py)

- Fixed some apparent factoring/conditional errors.

- MUST FIX: I tested only with "Enable self-registration" and "Let
  users select their own passwords" checked.  IOW, I didn't test the
  password reset process.  That definitely needs testing before
  merging.

  Has this been integrated with the password reset?  I don't see any
  code.  Can someone with a configured mail host test password reset?

  Update: Haven't heard anything on this.  This is still a blocker.

- MUST FIX: I tested only that existing behavior (min 5 chars) worked.
  I have no way I can find to test TTP.  We'd need to have some way to
  test TTP before I'd feel comfortable approving for merge.

  Where are some password validation plugins that can be installed and
  configured for more real-world testing?

  Update: Haven't heard anything on this.  This is still a blocker.

- MUST FIX: There's a failure in the CMFPlone tests that doesn't
  happen on master:

  Failure in test testGeneratePassword (Products.CMFPlone.tests.testRegistrationTool.TestPasswordGeneration)
  Traceback (most recent call last):
    File "/home/xen/src/buildout.python/parts/opt/lib/python2.6/unittest.py", line 279, in run
      testMethod()
    File "/home/xen/src/buildout.coredev/src/Products.CMFPlone/Products/CMFPlone/tests/testRegistrationTool.py", line 185, in testGeneratePassword
      self.assertEqual(len(pw), 6)
    File "/home/xen/src/buildout.python/parts/opt/lib/python2.6/unittest.py", line 350, in failUnlessEqual
      (msg or '%r != %r' % (first, second))
  AssertionError: 56 != 6


Conclusion
----------

We should definitely be using this PAS API but this implementation is
not ready as far as I can see.  I hate to say it, but I'm still -1 for
merge.
