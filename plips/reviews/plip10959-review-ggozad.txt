PLIP 10959: API for password validation policy
==============================================

PLIP ticket: https://dev.plone.org/plone/ticket/10959

Review by Yiorgis Gozadinos (ggozad@jarn.com, ggozad on irc)

The PLIP was reviewed on Mac OS X 10.6.7 using python 2.6.5 and Safari.

First review: 14 Jun 2011
Updated on: 30 Jun 2011

Review steps
------------

- Ran buildout using the plip10959-password-validation-api.cfg file.

- Ran tests for plone.app.users.

- Ran bin/alltests to check for additional failures in the Plone stack
  caused by PLIP changes.

- Reviewed the code in plone.app.users.

Notes and observations
----------------------

- This is an important PLIP as Plone currently lacks a basis to build password
  policies. The PLIP suggests an API is going to be built that makes use of
  PAS validators. 

- Automatic initial password generation if enabled is problematic since
  passwords generated completely randomly do not necessarily abide to the
  password validators. There are ways of dealing with this for instance
  either:

  - By not validating initial random passwords.
  - By providing through the API means to hook password generators. If
    implemented, this should take into account that more than one PAS 
    validators might be active.

  This is now addressed in the PLIP by adding a "generated_password" user 
  property on the plugin. This to me seems hacky and reveals the lack of
  API thinking behind the implementation. It will not work with multiple
  validation plugins, seems to be the wrong way to address the problem, and
  is not secure.

- In my opinion there should be more tests, covering for instance the 
  case where there is more than one validator, or the case where there is no
  validator at all, password generation etc.

- I think the API is lacking. The PLIP relies on PAS plugins without
  introducing an additional layer. Consider for instance the problem with the
  password generation mentioned above. It would also be interesting to tackle
  the more general problem of password policies. As an example, plugins
  that would implement password aging (the user would need to change her
  password every X amount of time) and password history. This would require
  different hooks, for instance hooks for when the user logs in or when the
  user is first created.
  This would require work on PlonePAS or PAS itself. Given the amount of
  confusion that is created by having authentication-related code spreading
  from PAS, to PlonePAS, to plone.app.users and plone.app.controlpanel, I
  think adding more cruft to an already heavy stack is not desirable.

- Documentation is minimal. It would be nice to see a full example of how
  to build a password policy in the plone.app.users docs or elsewhere,
  especially if a new API is introduced.

Conclusion
----------

This work looks promising but unfortunately seems unfinished. I would
recommend against its inclusion for 4.2.
